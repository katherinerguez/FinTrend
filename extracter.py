import streamlit as st
import pandas as pd
import json
import matplotlib.pyplot as plt
import plotly.express as px
from hdfs import InsecureClient
import os
from datetime import datetime
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

st.set_page_config(page_title="An√°lisis Hist√≥rico Financiero", layout="wide")
st.title("üìä An√°lisis de Opciones Financieras")

# Conexi√≥n a HDFS
@st.cache_data
def load_data_from_hdfs(hdfs_url, directory_path):
    client = InsecureClient(hdfs_url)
    all_data = []

    try:
        raw_list = client.list(directory_path, status=True)
        for name, metadata in raw_list:
            if metadata['type'] == 'FILE' and metadata['length'] > 0:
                st.info(f"Leyendo archivo: {name}")
                with client.read(f"{directory_path}{name}") as reader:
                    try:
                        raw_data = json.load(reader)
                        if "data" in raw_data:
                            all_data.extend(raw_data["data"])
                        else:
                            st.warning(f"El archivo {name} no contiene la clave 'data'.")
                    except json.JSONDecodeError as e:
                        st.warning(f"Error al decodificar JSON en el archivo {name}: {e}")
            elif metadata['type'] == 'FILE' and metadata['length'] == 0:
                st.warning(f"Archivo vac√≠o omitido: {name}")
    except Exception as e:
        st.error(f"Error al listar archivos en HDFS: {e}")
        return pd.DataFrame()

    df = pd.DataFrame(all_data)
    st.info(f"Total de registros cargados: {len(df)}")
    return df

hdfs_url = "http://localhost:9870"  
directory_path = "/user/data/ibm_options/" 

data = pd.DataFrame()

try:
    data = load_data_from_hdfs(hdfs_url, directory_path)
    if not data.empty:
        st.success("Datos cargados exitosamente desde HDFS.")
    else:
        st.warning("No se encontraron datos v√°lidos en HDFS.")
except Exception as e:
    st.error(f"Error al cargar los datos desde HDFS: {e}")

if data.empty:
    st.error("No se encontraron datos v√°lidos en los archivos JSON.")
    st.stop()

numeric_columns = ["strike", "last", "mark", "bid", "ask", "volume", "open_interest",
                   "implied_volatility", "delta", "gamma", "theta", "vega", "rho"]
for col in numeric_columns:
    if col in data.columns:
        data[col] = pd.to_numeric(data[col], errors="coerce")

date_columns = ["date", "expiration"]
for col in date_columns:
    if col in data.columns:
        data[col] = pd.to_datetime(data[col], errors="coerce")

# Filtrado de datos
st.sidebar.header("Filtros")
type_filter = st.sidebar.multiselect("Selecciona tipo de opci√≥n", options=data["type"].unique())

# Aplicar filtros
filtered_data = data.copy()
if type_filter:
    filtered_data = filtered_data[filtered_data["type"].isin(type_filter)]

if filtered_data.empty:
    st.warning("No hay datos disponibles para los filtros seleccionados.")
date_columns = ["expiration", "date"]
for col in date_columns:
    filtered_data[col] = pd.to_datetime(filtered_data[col], errors="coerce")

# Visualizaci√≥n de m√©tricas
st.subheader("Gr√°ficos de M√©tricas Financieras")

# Gr√°fico de l√≠neas para las metricas
st.write("A continuaci√≥n se genera un gr√°fico de l√≠neas que muestra la evoluci√≥n temporal de una m√©trica financiera seleccionada por el usuario."
"Con lo cual se puede apreciar patrones en las m√©tricas, se puede llevar a cabo un monitoreo y ver c√≥mo cambian y ayudar a identificar cu√°l es el mejor momento para venta o compra.")
metric_column = st.selectbox("Selecciona la m√©trica financiera a analizar", numeric_columns)
fig = px.line(
    filtered_data,
    x=filtered_data.index,  
    y=metric_column,
    color="symbol",  
    title=f"Evoluci√≥n de {metric_column}",
    labels={"index": "√çndice", metric_column: metric_column}
)
st.plotly_chart(fig, use_container_width=True)

# Distribuci√≥n de la m√©trica seleccionada
st.subheader("Distribuci√≥n de la M√©trica Seleccionada")
st.write("De acuerdo a la m√©trica seleccionada anteriormente se muestra un histograma que representa su distribuci√≥n. Eval√∫a si los precios o vol√∫menes siguen una distribuci√≥n normal o tienen sesgos. "
"Se detecta outliers en las m√©tricas y analizar la dispersi√≥n de m√©tricas como volatilidad impl√≠cita para medir incertidumbre.")
fig_hist = px.histogram(
    filtered_data,
    x=metric_column,
    nbins=30,
    title=f"Distribuci√≥n de {metric_column}"
)
st.plotly_chart(fig_hist, use_container_width=True)

# Comparar contratos Call y Put
st.subheader("Comparaci√≥n entre Opciones Call y Put")
st.write("Compara el volumen y el inter√©s abierto (open interest) entre opciones Call y Put. Se puede apreciar los sentimientos del mercado que se√±ala que altos vol√∫menes en Call pueden indicar expectativas alcistas"
"y altos vol√∫menes en Put pueden indicar expectativas bajistas. El open interest ayuda a evaluar la liquidez de las opciones.")
call_put_comparison = filtered_data.groupby("type")[["volume", "open_interest"]].sum().reset_index()
fig_bar = px.bar(
    call_put_comparison,
    x="type",
    y=["volume", "open_interest"],
    barmode="group",
    title="Volumen y Open Interest"
)
st.plotly_chart(fig_bar, use_container_width=True)

data['expiration'] = pd.to_datetime(data['expiration'])

# Calcular d√≠as hasta la expiraci√≥n
data['days_to_expiry'] = (data['expiration'] - datetime.now()).dt.days

# Preparaci√≥n de datos para el modelo
features = ['strike', 'implied_volatility', 'days_to_expiry', 'delta', 'gamma', 'theta', 'vega', 'rho']
X = data[features]
y = data['last']  # Usamos 'last' como variable objetivo (precio de la opci√≥n)

# Eliminar filas con valores nulos
X = X.dropna()
y = y[X.index]

# Normalizaci√≥n de caracter√≠sticas
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Divisi√≥n de datos
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Entrenamiento del modelo
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

st.sidebar.header("Par√°metros de Entrada")
strike = st.sidebar.number_input("Strike Price", value=100.0)
volatility = st.sidebar.number_input("Volatilidad Impl√≠cita", value=0.2)
days_to_expiry = st.sidebar.number_input("D√≠as hasta la Expiraci√≥n", value=30)
delta = st.sidebar.number_input("Delta", value=0.5)
gamma = st.sidebar.number_input("Gamma", value=0.01)
theta = st.sidebar.number_input("Theta", value=-0.05)
vega = st.sidebar.number_input("Vega", value=0.1)
rho = st.sidebar.number_input("Rho", value=0.01)

# Predicci√≥n
if st.sidebar.button("Predecir"):
    input_data = pd.DataFrame({
        'strike': [strike],
        'implied_volatility': [volatility],
        'days_to_expiry': [days_to_expiry],
        'delta': [delta],
        'gamma': [gamma],
        'theta': [theta],
        'vega': [vega],
        'rho': [rho]
    })
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)
    st.write(f"El precio predicho de la opci√≥n es: **{prediction[0]:.2f}**")

st.subheader("Predicciones vs Valores Reales")
# Evaluaci√≥n del modelo
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
st.write("Se utilizan los datos hist√≥ricos y modelos avanzados para identificar tendencias y patrones ocultos, ofreci√©ndote una ventaja estrat√©gica en tus decisiones de inversi√≥n. "
        f"Como modelo se emplea Random Forest. Es un modelo robusto que maneja bien relaciones no lineales entre las caracter√≠sticas y el objetivo. Esto es importante en finanzas, donde las relaciones entre variables pueden ser complejas. Al evaluar el modelo el Error Cuadr√°tico Medio (MSE) fue de **{mse:.2f}**, por lo que el modelo es bueno")

# Gr√°fico de predicciones vs valores reales

fig = px.scatter(
    x=y_test,
    y=y_pred,
    labels={'x': 'Valores Reales', 'y': 'Predicciones'},
    title="Comparaci√≥n entre Valores Reales y Predicciones"
)
fig.add_trace(go.Scatter(x=[min(y_test), max(y_test)], y=[min(y_test), max(y_test)], mode='lines', name='L√≠nea Ideal'))
st.plotly_chart(fig, use_container_width=True)

# Gr√°fico de importancia de caracter√≠sticas
st.subheader("Importancia de las Caracter√≠sticas")
st.write("Para mostrar la importancia relativa de cada caracter√≠stica en las predicciones del modelo se utiliza un gr√°fico de barras. Esto nos ayuda a entender qu√© factores tienen m√°s influencia en el precio de la opci√≥n.")
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
fig_importance = px.bar(
    feature_importance_df,
    x='Feature',
    y='Importance',
    title="Importancia de las Caracter√≠sticas en el Modelo"
)
st.plotly_chart(fig_importance, use_container_width=True)




